import { NetworkCommonProps, InputNode, LayerId, InputLink } from './types';
export declare const commonDefaultProps: Omit<NetworkCommonProps<InputNode, InputLink>, 'margin' | 'theme' | 'onClick' | 'renderWrapper' | 'ariaLabel' | 'ariaLabelledBy' | 'ariaDescribedBy'> & {
    layers: LayerId[];
};
export declare const svgDefaultProps: {
    nodeComponent: import("./types").NodeComponent<InputNode>;
    linkComponent: import("./types").LinkComponent<InputNode, InputLink>;
    linkBlendMode: NonNullable<import("@nivo/core").CssMixBlendMode | undefined>;
    animate: boolean;
    motionConfig: string | Partial<import("@react-spring/core").AnimationConfig>;
    annotations: import("@nivo/annotations").AnnotationMatcher<import("./types").ComputedNode<InputNode>>[];
    linkDistance: import("./types").DerivedProp<InputLink, number>;
    centeringStrength: number;
    repulsivity: number;
    distanceMin: number;
    distanceMax: number;
    iterations: number;
    nodeSize: import("./types").DerivedProp<InputNode, number>;
    activeNodeSize: import("./types").DerivedProp<InputNode, number>;
    inactiveNodeSize: import("./types").DerivedProp<InputNode, number>;
    nodeColor: import("./types").DerivedProp<InputNode, string>;
    nodeBorderWidth: import("./types").DerivedProp<InputNode, number>;
    nodeBorderColor: import("@nivo/colors").InheritedColorConfig<Omit<import("./types").ComputedNode<InputNode>, "size" | "borderWidth" | "borderColor">>;
    linkThickness: import("./types").DerivedProp<Omit<import("./types").ComputedLink<InputNode, InputLink>, "color" | "thickness">, number>;
    linkColor: import("@nivo/colors").InheritedColorConfig<Omit<import("./types").ComputedLink<InputNode, InputLink>, "color" | "thickness">>;
    isInteractive: boolean;
    defaultActiveNodeIds: string[];
    nodeTooltip: import("./types").NodeTooltip<InputNode>;
    role: string;
    layers: LayerId[];
};
export declare const canvasDefaultProps: {
    renderNode: <Node_1 extends InputNode>(ctx: CanvasRenderingContext2D, node: import("./types").ComputedNode<Node_1>) => void;
    renderLink: <Node_2 extends InputNode, Link extends InputLink>(ctx: CanvasRenderingContext2D, link: import("./types").ComputedLink<Node_2, Link>) => void;
    pixelRatio: number;
    animate: boolean;
    motionConfig: string | Partial<import("@react-spring/core").AnimationConfig>;
    annotations: import("@nivo/annotations").AnnotationMatcher<import("./types").ComputedNode<InputNode>>[];
    linkDistance: import("./types").DerivedProp<InputLink, number>;
    centeringStrength: number;
    repulsivity: number;
    distanceMin: number;
    distanceMax: number;
    iterations: number;
    nodeSize: import("./types").DerivedProp<InputNode, number>;
    activeNodeSize: import("./types").DerivedProp<InputNode, number>;
    inactiveNodeSize: import("./types").DerivedProp<InputNode, number>;
    nodeColor: import("./types").DerivedProp<InputNode, string>;
    nodeBorderWidth: import("./types").DerivedProp<InputNode, number>;
    nodeBorderColor: import("@nivo/colors").InheritedColorConfig<Omit<import("./types").ComputedNode<InputNode>, "size" | "borderWidth" | "borderColor">>;
    linkThickness: import("./types").DerivedProp<Omit<import("./types").ComputedLink<InputNode, InputLink>, "color" | "thickness">, number>;
    linkColor: import("@nivo/colors").InheritedColorConfig<Omit<import("./types").ComputedLink<InputNode, InputLink>, "color" | "thickness">>;
    isInteractive: boolean;
    defaultActiveNodeIds: string[];
    nodeTooltip: import("./types").NodeTooltip<InputNode>;
    role: string;
    layers: LayerId[];
};
//# sourceMappingURL=defaults.d.ts.map