# Generated by Django 5.0.6 on 2024-08-11 15:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_tenants.postgresql_backend.base
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "schema_name",
                    models.CharField(
                        db_index=True,
                        max_length=63,
                        unique=True,
                        validators=[
                            django_tenants.postgresql_backend.base._check_schema_name
                        ],
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("created_on", models.DateField(auto_now_add=True)),
                (
                    "domain_url",
                    models.CharField(
                        blank=True, max_length=253, null=True, unique=True
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("objective", models.TextField(blank=True)),
                ("start_date", models.DateField(db_index=True)),
                ("end_date", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("IN_PROGRESS", "In-Progress"),
                            ("COMPLETED", "Completed"),
                            ("ON_HOLD", "On-Hold"),
                            ("CANCELLED", "Cancelled"),
                            ("ARCHIVED", "Archived"),
                        ],
                        default="PLANNED",
                        max_length=20,
                    ),
                ),
                ("result_summary", models.TextField(blank=True)),
                ("result_value", models.FloatField(blank=True, null=True)),
                ("result_date", models.DateField(blank=True, null=True)),
                ("impact_description", models.TextField(blank=True)),
                (
                    "result_files",
                    models.FileField(
                        blank=True, null=True, upload_to="experiment_results/"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Metric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("KPI", "Key Performance Indicator"),
                            ("NORTH_STAR", "North Star Metric"),
                            ("INPUT", "Input Metric"),
                            ("DIAGNOSIS", "Diagnosis Metric"),
                            ("OUTPUT", "Output Metric"),
                        ],
                        db_index=True,
                        default="KPI",
                        max_length=50,
                    ),
                ),
                (
                    "value_type",
                    models.CharField(
                        choices=[
                            ("COUNT", "Count"),
                            ("PERCENTAGE", "Percentage"),
                            ("CURRENCY", "Currency"),
                            ("RATIO", "Ratio"),
                        ],
                        default="COUNT",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="metrics",
                        to="metrics.category",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImpactAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("before_value", models.FloatField()),
                ("after_value", models.FloatField()),
                ("percentage_change", models.FloatField()),
                ("confidence", models.FloatField()),
                ("artifact_link", models.URLField(blank=True)),
                (
                    "experiment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="impact_analyses",
                        to="metrics.experiment",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="impact_analyses",
                        to="metrics.metric",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Forecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("forecast_date", models.DateField(db_index=True)),
                ("forecast_value", models.FloatField()),
                ("model_used", models.CharField(max_length=100)),
                ("accuracy", models.FloatField(blank=True, null=True)),
                ("lower_bound", models.FloatField()),
                ("upper_bound", models.FloatField()),
                ("confidence_interval", models.JSONField(blank=True, default=dict)),
                ("variance", models.FloatField(blank=True, null=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="forecasts",
                        to="metrics.metric",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experiment",
            name="metrics",
            field=models.ManyToManyField(
                related_name="experiments", to="metrics.metric"
            ),
        ),
        migrations.CreateModel(
            name="DataQualityScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_entry", models.CharField(max_length=255)),
                ("completeness_score", models.FloatField()),
                ("accuracy_score", models.FloatField()),
                ("consistency_score", models.FloatField()),
                ("timeliness_score", models.FloatField()),
                ("overall_score", models.FloatField()),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_quality_scores",
                        to="metrics.metric",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Correlation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lag", models.IntegerField()),
                ("pearson_correlation", models.FloatField()),
                ("spearman_correlation", models.FloatField()),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "metric1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="correlations_from",
                        to="metrics.metric",
                    ),
                ),
                (
                    "metric2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="correlations_to",
                        to="metrics.metric",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Connection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("relationship", models.CharField(blank=True, max_length=100)),
                ("strength", models.FloatField()),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "from_metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outgoing_connections",
                        to="metrics.metric",
                    ),
                ),
                (
                    "to_metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incoming_connections",
                        to="metrics.metric",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Anomaly",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("detection_date", models.DateField(db_index=True)),
                ("anomaly_value", models.FloatField()),
                ("anomaly_score", models.FloatField()),
                ("notes", models.TextField(blank=True)),
                (
                    "anomaly_type",
                    models.CharField(
                        choices=[
                            ("IGNORE", "Ignore/Noise"),
                            ("ANOMALY", "Anomaly"),
                            ("OPPORTUNITY", "Opportunity"),
                        ],
                        default="IGNORE",
                        max_length=20,
                    ),
                ),
                (
                    "quality",
                    models.CharField(
                        choices=[("HIGH", "High-Quality"), ("LOW", "Low-Quality")],
                        default="LOW",
                        max_length=20,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anomalies",
                        to="metrics.metric",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetricTarget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target_kpi", models.CharField(max_length=100)),
                ("target_remarks", models.TextField(blank=True)),
                ("target_date", models.DateField(blank=True, db_index=True, null=True)),
                ("target_value", models.FloatField(blank=True, null=True)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="targets",
                        to="metrics.metric",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MovingAverage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField()),
                ("ma_type", models.CharField(max_length=10)),
                ("period", models.IntegerField()),
                ("value", models.FloatField()),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="moving_averages",
                        to="metrics.metric",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("created_on", models.DateField(auto_now_add=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PendingComputation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="metrics.metric"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pending_computations",
                        to="metrics.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_read", models.BooleanField(default=False)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="metrics.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NetworkAnalysisResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("analysis_type", models.CharField(max_length=20)),
                ("result", models.JSONField()),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="network_analysis_results",
                        to="metrics.metric",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="network_analysis_results",
                        to="metrics.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="metric",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="metrics",
                to="metrics.project",
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="experiments",
                to="metrics.project",
            ),
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("layout", models.JSONField(blank=True, default=dict)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboards",
                        to="metrics.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComputationStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="computation_statuses",
                        to="metrics.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="category",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="categories",
                to="metrics.project",
            ),
        ),
        migrations.CreateModel(
            name="ActionRemark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("date", models.DateField(blank=True, db_index=True, null=True)),
                ("summary", models.TextField()),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("NO_IMPACT", "No-Impact"),
                            ("POSITIVE", "Positive"),
                            ("NEGATIVE", "Negative"),
                        ],
                        default="NO_IMPACT",
                        max_length=20,
                    ),
                ),
                (
                    "importance",
                    models.CharField(
                        choices=[
                            ("MINOR", "Minor"),
                            ("MEDIUM", "Medium"),
                            ("MAJOR", "Major"),
                        ],
                        default="MEDIUM",
                        max_length=20,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_remarks",
                        to="metrics.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("configuration", models.JSONField(blank=True, default=dict)),
                ("analysis_result", models.JSONField(blank=True, null=True)),
                ("forecast_result", models.JSONField(blank=True, null=True)),
                ("anomaly_result", models.JSONField(blank=True, null=True)),
                ("relationship_result", models.JSONField(blank=True, null=True)),
                ("report", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report",
                        to="metrics.metric",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="metrics.project",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SeasonalityResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("seasonality_type", models.CharField(max_length=20)),
                ("strength", models.FloatField()),
                ("period", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seasonality_results",
                        to="metrics.metric",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="TacticalSolution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("artifact_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tactical_solutions",
                        to="metrics.project",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="metrics.project",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="metric",
            name="tags",
            field=models.ManyToManyField(related_name="metrics", to="metrics.tag"),
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Strategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "estimated_time",
                    models.DurationField(
                        help_text="Estimated time for strategy completion"
                    ),
                ),
                ("artifacts_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategies",
                        to="metrics.project",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategies",
                        to="metrics.team",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MetricMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_source", models.CharField(blank=True, max_length=100)),
                ("source_url", models.URLField(blank=True)),
                (
                    "rhythm",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("BI_WEEKLY", "Bi-Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("YEARLY", "Yearly"),
                        ],
                        default="MONTHLY",
                        max_length=20,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True, db_index=True)),
                ("technical_description", models.TextField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("artifacts_url", models.URLField(blank=True)),
                ("hypothesis", models.TextField(blank=True)),
                (
                    "confidence",
                    models.CharField(
                        choices=[
                            ("NONE", "None"),
                            ("ON_TRACK", "On-track"),
                            ("AT_RISK", "At-risk"),
                            ("OFF_TRACK", "Off-track"),
                        ],
                        default="NONE",
                        max_length=20,
                    ),
                ),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                (
                    "data_quality_score",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_quality_score",
                        to="metrics.dataqualityscore",
                    ),
                ),
                (
                    "metric",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="metrics.metric"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="metric_metadata_set",
                        to="metrics.team",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experiment",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="experiment_set",
                to="metrics.team",
            ),
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="members",
                        to="metrics.team",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TechnicalIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("stochastic_value", models.FloatField()),
                ("rsi_value", models.FloatField()),
                ("percent_change", models.FloatField()),
                ("moving_average", models.FloatField()),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicators",
                        to="metrics.metric",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TimeDimension",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(unique=True)),
                ("day", models.IntegerField()),
                ("day_of_week", models.IntegerField()),
                ("day_name", models.CharField(max_length=10)),
                ("week", models.IntegerField()),
                ("month", models.IntegerField()),
                ("month_name", models.CharField(max_length=10)),
                ("quarter", models.IntegerField()),
                ("year", models.IntegerField()),
                ("is_weekend", models.BooleanField()),
                ("is_holiday", models.BooleanField()),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_dimensions",
                        to="metrics.project",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Trend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("trend_type", models.CharField(max_length=50)),
                ("start_date", models.DateField(db_index=True)),
                ("end_date", models.DateField(blank=True, db_index=True, null=True)),
                ("trend_value", models.FloatField()),
                ("notes", models.TextField(blank=True)),
                ("slope", models.FloatField()),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trends",
                        to="metrics.metric",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TrendChangePoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField()),
                ("direction", models.CharField(max_length=20)),
                ("significance", models.FloatField(blank=True, null=True)),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trend_change_points",
                        to="metrics.metric",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Insight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="insights",
                        to="metrics.metric",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["metric", "date"], name="metrics_ins_metric__b85d3a_idx"
                    ),
                    models.Index(
                        fields=["user", "date"], name="metrics_ins_user_id_1ebb42_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="HistoricalData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("value", models.FloatField(blank=True, null=True)),
                (
                    "forecast",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="historical_data",
                        to="metrics.forecast",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_%(class)ss",
                        to="metrics.client",
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historical_data",
                        to="metrics.metric",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["metric", "date"], name="metrics_his_metric__a2923a_idx"
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="forecast",
            index=models.Index(
                fields=["metric", "forecast_date"],
                name="metrics_for_metric__4c9ae2_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dataqualityscore",
            unique_together={("tenant", "metric")},
        ),
        migrations.AlterUniqueTogether(
            name="correlation",
            unique_together={("tenant", "metric1", "metric2", "lag")},
        ),
        migrations.AlterUniqueTogether(
            name="connection",
            unique_together={("tenant", "from_metric", "to_metric")},
        ),
        migrations.AddIndex(
            model_name="anomaly",
            index=models.Index(
                fields=["metric", "detection_date"],
                name="metrics_ano_metric__84982d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="metrictarget",
            index=models.Index(
                fields=["metric", "target_date"], name="metrics_met_metric__a2b705_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="pendingcomputation",
            unique_together={("tenant", "metric")},
        ),
        migrations.AddIndex(
            model_name="actionremark",
            index=models.Index(fields=["date"], name="metrics_act_date_7f0c44_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="seasonalityresult",
            unique_together={("metric", "seasonality_type")},
        ),
        migrations.AddIndex(
            model_name="tag",
            index=models.Index(
                fields=["name", "project"], name="metrics_tag_name_1bdb27_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tag",
            unique_together={("name", "project")},
        ),
        migrations.AlterUniqueTogether(
            name="metric",
            unique_together={("tenant", "project", "name")},
        ),
        migrations.AddIndex(
            model_name="metricmetadata",
            index=models.Index(
                fields=["last_updated"], name="metrics_met_last_up_6e2e67_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="experiment",
            index=models.Index(
                fields=["start_date", "end_date"], name="metrics_exp_start_d_04716a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="timedimension",
            index=models.Index(fields=["date"], name="metrics_tim_date_53cb14_idx"),
        ),
        migrations.AddIndex(
            model_name="timedimension",
            index=models.Index(
                fields=["year", "month", "day"], name="metrics_tim_year_92da9e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trend",
            index=models.Index(
                fields=["metric", "start_date", "end_date"],
                name="metrics_tre_metric__d386bb_idx",
            ),
        ),
    ]
