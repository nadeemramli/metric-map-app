# Generated by Django 5.0.6 on 2024-07-23 21:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("metrics", "0005_remove_connection_project_metric_project_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Correlation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lag", models.IntegerField()),
                ("pearson_correlation", models.FloatField()),
                ("spearman_correlation", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="DataQualityScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_entry", models.CharField(max_length=255)),
                ("completeness_score", models.FloatField()),
                ("accuracy_score", models.FloatField()),
                ("consistency_score", models.FloatField()),
                ("timeliness_score", models.FloatField()),
                ("overall_score", models.FloatField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ImpactAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("before_value", models.FloatField()),
                ("after_value", models.FloatField()),
                ("percentage_change", models.FloatField()),
                ("confidence", models.FloatField()),
                ("artifact_link", models.URLField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Insight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="MetricMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_source", models.CharField(blank=True, max_length=100)),
                ("source_url", models.URLField(blank=True)),
                (
                    "rhythm",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("BI_WEEKLY", "Bi-Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("YEARLY", "Yearly"),
                        ],
                        default="MONTHLY",
                        max_length=20,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True, db_index=True)),
                ("technical_description", models.TextField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("artifacts_url", models.URLField(blank=True)),
                ("hypothesis", models.TextField(blank=True)),
                (
                    "confidence",
                    models.CharField(
                        choices=[
                            ("NONE", "None"),
                            ("ON_TRACK", "On-track"),
                            ("AT_RISK", "At-risk"),
                            ("OFF_TRACK", "Off-track"),
                        ],
                        default="NONE",
                        max_length=20,
                    ),
                ),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="MetricTarget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target_kpi", models.CharField(max_length=100)),
                ("target_remarks", models.TextField(blank=True)),
                ("target_date", models.DateField(blank=True, db_index=True, null=True)),
                ("target_value", models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Strategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "estimated_time",
                    models.DurationField(
                        help_text="Estimated time for strategy completion"
                    ),
                ),
                ("artifacts_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TacticalSolution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("artifact_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TechnicalIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("stochastic_value", models.FloatField()),
                ("rsi_value", models.FloatField()),
                ("percent_change", models.FloatField()),
                ("moving_average", models.FloatField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TimeDimension",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(unique=True)),
                ("day", models.IntegerField()),
                ("day_of_week", models.IntegerField()),
                ("day_name", models.CharField(max_length=10)),
                ("week", models.IntegerField()),
                ("month", models.IntegerField()),
                ("month_name", models.CharField(max_length=10)),
                ("quarter", models.IntegerField()),
                ("year", models.IntegerField()),
                ("is_weekend", models.BooleanField()),
                ("is_holiday", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RemoveField(
            model_name="target",
            name="metric",
        ),
        migrations.RemoveField(
            model_name="target",
            name="tenant",
        ),
        migrations.RemoveIndex(
            model_name="metric",
            name="metrics_met_name_c9d100_idx",
        ),
        migrations.RemoveIndex(
            model_name="metric",
            name="metrics_met_last_up_7984a6_idx",
        ),
        migrations.RenameField(
            model_name="actionremark",
            old_name="description",
            new_name="summary",
        ),
        migrations.AlterUniqueTogether(
            name="metric",
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name="connection",
            name="correlation_coefficient",
        ),
        migrations.RemoveField(
            model_name="experiment",
            name="results",
        ),
        migrations.RemoveField(
            model_name="historicaldata",
            name="anomaly_detected",
        ),
        migrations.RemoveField(
            model_name="historicaldata",
            name="forecasted_value",
        ),
        migrations.RemoveField(
            model_name="historicaldata",
            name="trend_component",
        ),
        migrations.AddField(
            model_name="actionremark",
            name="importance",
            field=models.CharField(
                choices=[("MINOR", "Minor"), ("MEDIUM", "Medium"), ("MAJOR", "Major")],
                default="MEDIUM",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="actionremark",
            name="title",
            field=models.CharField(default=django.utils.timezone.now, max_length=200),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="anomaly",
            name="anomaly_type",
            field=models.CharField(
                choices=[
                    ("IGNORE", "Ignore/Noise"),
                    ("ANOMALY", "Anomaly"),
                    ("OPPORTUNITY", "Opportunity"),
                ],
                default="IGNORE",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="anomaly",
            name="quality",
            field=models.CharField(
                choices=[("HIGH", "High-Quality"), ("LOW", "Low-Quality")],
                default="LOW",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="impact_description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="objective",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="result_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="result_files",
            field=models.FileField(
                blank=True, null=True, upload_to="experiment_results/"
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="result_summary",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="result_value",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="experiment",
            name="title",
            field=models.CharField(default=django.utils.timezone.now, max_length=200),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="forecast",
            name="variance",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicaldata",
            name="forecast",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="historical_data",
                to="metrics.forecast",
            ),
        ),
        migrations.AlterField(
            model_name="actionremark",
            name="impact",
            field=models.CharField(
                choices=[
                    ("NO_IMPACT", "No-Impact"),
                    ("POSITIVE", "Positive"),
                    ("NEGATIVE", "Negative"),
                ],
                default="NO_IMPACT",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="actionremark",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="anomaly",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="connection",
            name="from_metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="outgoing_connections",
                to="metrics.metric",
            ),
        ),
        migrations.AlterField(
            model_name="connection",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="connection",
            name="to_metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="incoming_connections",
                to="metrics.metric",
            ),
        ),
        migrations.AlterField(
            model_name="dashboard",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="status",
            field=models.CharField(
                choices=[
                    ("PLANNED", "Planned"),
                    ("IN_PROGRESS", "In-Progress"),
                    ("COMPLETED", "Completed"),
                    ("ON_HOLD", "On-Hold"),
                    ("CANCELLED", "Cancelled"),
                    ("ARCHIVED", "Archived"),
                ],
                default="PLANNED",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="experiment",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="forecast",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="historicaldata",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="metric",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="metric",
            name="type",
            field=models.CharField(
                choices=[
                    ("KPI", "Key Performance Indicator"),
                    ("NORTH_STAR", "North Star Metric"),
                    ("INPUT", "Input Metric"),
                    ("DIAGNOSIS", "Diagnosis Metric"),
                    ("OUTPUT", "Output Metric"),
                ],
                db_index=True,
                default="KPI",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="metric",
            name="value_type",
            field=models.CharField(
                choices=[
                    ("COUNT", "Count"),
                    ("PERCENTAGE", "Percentage"),
                    ("CURRENCY", "Currency"),
                    ("RATIO", "Ratio"),
                ],
                default="COUNT",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="report",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="tag",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AlterField(
            model_name="trend",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="correlation",
            name="metric1",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="correlations_from",
                to="metrics.metric",
            ),
        ),
        migrations.AddField(
            model_name="correlation",
            name="metric2",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="correlations_to",
                to="metrics.metric",
            ),
        ),
        migrations.AddField(
            model_name="correlation",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to.",
                related_name="custom_user_set",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="custom_user_set",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddField(
            model_name="dataqualityscore",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="impactanalysis",
            name="experiment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="impact_analyses",
                to="metrics.experiment",
            ),
        ),
        migrations.AddField(
            model_name="impactanalysis",
            name="metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="impact_analyses",
                to="metrics.metric",
            ),
        ),
        migrations.AddField(
            model_name="impactanalysis",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="insight",
            name="metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="insights",
                to="metrics.metric",
            ),
        ),
        migrations.AddField(
            model_name="insight",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="insight",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="insights",
                to="metrics.customuser",
            ),
        ),
        migrations.AddField(
            model_name="metricmetadata",
            name="data_quality_score",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_quality_score",
                to="metrics.dataqualityscore",
            ),
        ),
        migrations.AddField(
            model_name="metricmetadata",
            name="metric",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="metrics.metric"
            ),
        ),
        migrations.AddField(
            model_name="metricmetadata",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="metrictarget",
            name="metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="targets",
                to="metrics.metric",
            ),
        ),
        migrations.AddField(
            model_name="metrictarget",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="strategy",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="tacticalsolution",
            name="metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="solutions",
                to="metrics.metric",
            ),
        ),
        migrations.AddField(
            model_name="tacticalsolution",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="strategy",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="strategies",
                to="metrics.team",
            ),
        ),
        migrations.AddField(
            model_name="metricmetadata",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="metric_metadata_set",
                to="metrics.team",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="members",
                to="metrics.team",
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="experiment_set",
                to="metrics.team",
            ),
        ),
        migrations.AddField(
            model_name="technicalindicator",
            name="metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="metrics.metric"
            ),
        ),
        migrations.AddField(
            model_name="technicalindicator",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="timedimension",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="userprofile",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tenant_%(class)ss",
                to="metrics.client",
            ),
        ),
        migrations.AddField(
            model_name="userprofile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="profile",
                to="metrics.customuser",
            ),
        ),
        migrations.DeleteModel(
            name="Target",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="confidence",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="description",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="hypothesis",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="last_updated",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="position_x",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="position_y",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="rhythm",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="source",
        ),
        migrations.RemoveField(
            model_name="metric",
            name="technical_description",
        ),
        migrations.AlterUniqueTogether(
            name="correlation",
            unique_together={("tenant", "metric1", "metric2", "lag")},
        ),
        migrations.AddIndex(
            model_name="insight",
            index=models.Index(
                fields=["metric", "date"], name="metrics_ins_metric__b85d3a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="insight",
            index=models.Index(
                fields=["user", "date"], name="metrics_ins_user_id_1ebb42_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="metrictarget",
            index=models.Index(
                fields=["metric", "target_date"], name="metrics_met_metric__a2b705_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="metricmetadata",
            index=models.Index(
                fields=["last_updated"], name="metrics_met_last_up_6e2e67_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="timedimension",
            index=models.Index(fields=["date"], name="metrics_tim_date_53cb14_idx"),
        ),
        migrations.AddIndex(
            model_name="timedimension",
            index=models.Index(
                fields=["year", "month", "day"], name="metrics_tim_year_92da9e_idx"
            ),
        ),
    ]
